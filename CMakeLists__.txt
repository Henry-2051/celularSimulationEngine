cmake_minimum_required(VERSION 3.16)
project(sfmlgame VERSION 1.0 LANGUAGES CXX)

# Set the C++ standard to C++23
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# For Linux, add additional compiler flags
if(UNIX)
  # Note: You can modify the flags as needed.
  add_compile_options(-pedantic-errors -Wall -O2)
endif()

# Gather all the source files
file(GLOB SRC_FILES
  "${CMAKE_SOURCE_DIR}/src/*.cpp"
  "${CMAKE_SOURCE_DIR}/src/imgui/*.cpp"
  "${CMAKE_SOURCE_DIR}/src/imgui-sfml/*.cpp")

# Create the executable target
add_executable(${PROJECT_NAME} ${SRC_FILES})

# Specify include directories (as in your Makefile)
target_include_directories(${PROJECT_NAME} PRIVATE
  "${CMAKE_SOURCE_DIR}/src"
  "${CMAKE_SOURCE_DIR}/src/imgui"
  "${CMAKE_SOURCE_DIR}/src/imgui-sfml")

# Set the runtime output directory to "bin" (like your Makefile)
set_target_properties(${PROJECT_NAME} PROPERTIES
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/bin")

# Link necessary libraries
# You can either use find_package for SFML (if installed on your system) or directly link.
# Here, we assume SFML is available by name on Linux.
target_link_libraries(${PROJECT_NAME} PRIVATE
  sfml-graphics
  sfml-window
  sfml-system
  sfml-audio
  GL)

# Optionally, define a custom target "run" that builds and executes the program.
add_custom_target(run
  COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target ${PROJECT_NAME}
  COMMAND "${CMAKE_SOURCE_DIR}/bin/${PROJECT_NAME}"
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  COMMENT "Building and running ${PROJECT_NAME}")
